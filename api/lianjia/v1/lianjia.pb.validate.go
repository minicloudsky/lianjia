// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lianjia/v1/lianjia.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListErshoufangRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListErshoufangRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListErshoufangRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListErshoufangRequestMultiError, or nil if none found.
func (m *ListErshoufangRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListErshoufangRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListErshoufangRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetSize(); val <= 0 || val > 100 {
		err := ListErshoufangRequestValidationError{
			field:  "Size",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Query

	if len(errors) > 0 {
		return ListErshoufangRequestMultiError(errors)
	}

	return nil
}

// ListErshoufangRequestMultiError is an error wrapping multiple validation
// errors returned by ListErshoufangRequest.ValidateAll() if the designated
// constraints aren't met.
type ListErshoufangRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListErshoufangRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListErshoufangRequestMultiError) AllErrors() []error { return m }

// ListErshoufangRequestValidationError is the validation error returned by
// ListErshoufangRequest.Validate if the designated constraints aren't met.
type ListErshoufangRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListErshoufangRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListErshoufangRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListErshoufangRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListErshoufangRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListErshoufangRequestValidationError) ErrorName() string {
	return "ListErshoufangRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListErshoufangRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListErshoufangRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListErshoufangRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListErshoufangRequestValidationError{}

// Validate checks the field values on ErShouFangInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErShouFangInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErShouFangInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErShouFangInfoMultiError,
// or nil if none found.
func (m *ErShouFangInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ErShouFangInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CityId

	// no validation rules for HouseCode

	// no validation rules for ResblockId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for RecoDesc

	// no validation rules for TotalPrice

	// no validation rules for UnitPrice

	// no validation rules for JumpUrl

	// no validation rules for ListPictureUrl

	// no validation rules for HouseStatus

	// no validation rules for IsCtypeHouse

	// no validation rules for FbExpoId

	// no validation rules for YeZhuTuijianStatus

	// no validation rules for HaofangStatus

	// no validation rules for YezhuPayStatus

	// no validation rules for VrStatus

	// no validation rules for KeyStatus

	// no validation rules for NewStatus

	// no validation rules for BrandTitle

	// no validation rules for HotTopDspAgentUcId

	// no validation rules for HotTopDigV

	// no validation rules for HotTop

	// no validation rules for SellPriceStatus

	// no validation rules for PriceListingGovCn

	// no validation rules for UnitPriceGov

	// no validation rules for TotalPricePrefix

	// no validation rules for TotalPriceTitle

	// no validation rules for TotalPriceSuffix

	// no validation rules for UnitPricePrefix

	// no validation rules for UnitPriceTitle

	// no validation rules for UnitPriceSuffix

	// no validation rules for PriceInfoListTotalPricePrefix

	// no validation rules for PriceInfoListTotalPriceStr

	// no validation rules for PriceInfoListTotalPriceSuffix

	// no validation rules for PriceInfoListUnitPricePrefix

	// no validation rules for PriceInfoListUnitPriceStr

	// no validation rules for PriceInfoListUnitPriceSuffix

	// no validation rules for Tags

	// no validation rules for Layout

	// no validation rules for Area

	// no validation rules for Direction

	// no validation rules for Community

	// no validation rules for District

	// no validation rules for Street

	// no validation rules for Floor

	// no validation rules for TotalFloor

	if len(errors) > 0 {
		return ErShouFangInfoMultiError(errors)
	}

	return nil
}

// ErShouFangInfoMultiError is an error wrapping multiple validation errors
// returned by ErShouFangInfo.ValidateAll() if the designated constraints
// aren't met.
type ErShouFangInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErShouFangInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErShouFangInfoMultiError) AllErrors() []error { return m }

// ErShouFangInfoValidationError is the validation error returned by
// ErShouFangInfo.Validate if the designated constraints aren't met.
type ErShouFangInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErShouFangInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErShouFangInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErShouFangInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErShouFangInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErShouFangInfoValidationError) ErrorName() string { return "ErShouFangInfoValidationError" }

// Error satisfies the builtin error interface
func (e ErShouFangInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErShouFangInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErShouFangInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErShouFangInfoValidationError{}

// Validate checks the field values on ListErshoufangReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListErshoufangReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListErshoufangReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListErshoufangReplyMultiError, or nil if none found.
func (m *ListErshoufangReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListErshoufangReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListErshoufangReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListErshoufangReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListErshoufangReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListErshoufangReplyMultiError(errors)
	}

	return nil
}

// ListErshoufangReplyMultiError is an error wrapping multiple validation
// errors returned by ListErshoufangReply.ValidateAll() if the designated
// constraints aren't met.
type ListErshoufangReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListErshoufangReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListErshoufangReplyMultiError) AllErrors() []error { return m }

// ListErshoufangReplyValidationError is the validation error returned by
// ListErshoufangReply.Validate if the designated constraints aren't met.
type ListErshoufangReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListErshoufangReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListErshoufangReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListErshoufangReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListErshoufangReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListErshoufangReplyValidationError) ErrorName() string {
	return "ListErshoufangReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListErshoufangReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListErshoufangReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListErshoufangReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListErshoufangReplyValidationError{}
