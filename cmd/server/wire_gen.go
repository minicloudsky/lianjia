// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/minicloudsky/lianjia/internal/biz"
	"github.com/minicloudsky/lianjia/internal/conf"
	"github.com/minicloudsky/lianjia/internal/data"
	"github.com/minicloudsky/lianjia/internal/server"
	"github.com/minicloudsky/lianjia/internal/service"
	"github.com/minicloudsky/lianjia/internal/task"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	kafkaManager, err := data.NewKafkaManager(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	kafkaQueue := data.NewKafkaQueue(kafkaManager, logger)
	chanQueue := data.NewChannelQueue(logger)
	queue, err := data.NewQueue(confData, logger, kafkaQueue, chanQueue)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, logger, db, kafkaManager, queue)
	if err != nil {
		return nil, nil, err
	}
	lianjiaRepo := data.NewLianjiaRepo(dataData, logger)
	lianjiaUsecase := biz.NewLianjiaUsecase(lianjiaRepo, logger)
	serviceService := service.NewService(lianjiaUsecase, lianjiaRepo)
	httpServer := server.NewHTTPServer(confServer, serviceService, logger)
	grpcServer := server.NewGRPCServer(confServer, serviceService, logger)
	client, err := data.NewRedis(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	taskScheduler := task.NewTaskScheduler(confData, lianjiaUsecase, serviceService, client, lianjiaRepo, logger)
	app := newApp(logger, httpServer, grpcServer, taskScheduler)
	return app, func() {
		cleanup()
	}, nil
}
